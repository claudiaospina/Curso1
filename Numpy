{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNO7kDQa0bZ3C4bMvOksmfq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/claudiaospina/Curso1/blob/master/Numpy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7lAEEZtZiqQI",
        "colab_type": "text"
      },
      "source": [
        "#Numpy\n",
        "Ver link con slides\n",
        "https://www.iaa.csic.es/python/cientifico/numpy.pdf\n",
        "\n",
        "\n",
        "https://www.iaa.csic.es/python/"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vFaf22q7iy_g",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jDC8QyXYj77-",
        "colab_type": "text"
      },
      "source": [
        "1) Cree un array cuyos elementos sean los enteros pares en [1,100] y en orden decreciente."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aTSv0HG7kDgJ",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        },
        "outputId": "c9b98fe0-ca00-4e57-c30e-44ad7eec0948"
      },
      "source": [
        "import numpy as np\n",
        "import math\n",
        "enterospares=np.array(range(100,0,-2))\n",
        "print(enterospares)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[100  98  96  94  92  90  88  86  84  82  80  78  76  74  72  70  68  66\n",
            "  64  62  60  58  56  54  52  50  48  46  44  42  40  38  36  34  32  30\n",
            "  28  26  24  22  20  18  16  14  12  10   8   6   4   2]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JaxfYw2_mODW",
        "colab_type": "text"
      },
      "source": [
        "2) Cree un array con 10 elementos en [-2,2] y equidistantes entre ellos."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X_bOkoExmPd3",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        },
        "outputId": "4c5bc2f3-b1f7-469b-dc2e-fd006dd21eb3"
      },
      "source": [
        "equidistantes=np.linspace(-2,2,10)\n",
        "print(equidistantes)"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[-2.         -1.55555556 -1.11111111 -0.66666667 -0.22222222  0.22222222\n",
            "  0.66666667  1.11111111  1.55555556  2.        ]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XmDe2mWFnT50",
        "colab_type": "text"
      },
      "source": [
        "3) Dado un array de enteros entre 0 y 10, determine aquellos que son impares y mÃºltiplos de 3."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qBXVnBnXnX5L",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "b2265688-cf45-487a-e40c-45e696e251c3"
      },
      "source": [
        "enteros=np.arange(11)\n",
        "valida= (enteros%3==0) & (enteros%2==1)\n",
        "for j in valida:\n",
        "  print(enteros[j],\":\",valida[j])\n"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[] : []\n",
            "[] : []\n",
            "[] : []\n",
            "[[ 0  1  2  3  4  5  6  7  8  9 10]] : [[False False False  True False False False False False  True False]]\n",
            "[] : []\n",
            "[] : []\n",
            "[] : []\n",
            "[] : []\n",
            "[] : []\n",
            "[[ 0  1  2  3  4  5  6  7  8  9 10]] : [[False False False  True False False False False False  True False]]\n",
            "[] : []\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3gcgCxbKoIeu",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "5ee83d10-a27a-4876-f0d8-7771c74219f0"
      },
      "source": [
        "a = np.arange(11)\n",
        "\n",
        "fboo = (a % 3 == 0) & (a % 2 == 1) # atencion a los parentesis. Son necesarios\n",
        "                                   # porque la operacion '&' se realiza antes que\n",
        "                                   # '==' o '%'.\n",
        "\n",
        "for j in range(a.size):\n",
        "    print (a[j], '-->', fboo[j])"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 --> False\n",
            "1 --> False\n",
            "2 --> False\n",
            "3 --> True\n",
            "4 --> False\n",
            "5 --> False\n",
            "6 --> False\n",
            "7 --> False\n",
            "8 --> False\n",
            "9 --> True\n",
            "10 --> False\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}